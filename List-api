1. Count the total number of active users.
[
  {
    $match: {
      isActive: true
    }
  },
  {
    $count: "NoOfActive"
  }
]

2. Find the average age of male and female.
[
  {
    $group: {
      _id: "$gender",
     "AvgAge":{
       $avg:"$age"
     }
    }
  }
  
]
3. Give the total number of posts by active users.
[
  {
    $match: {
      "isActive":true
    }
  },
  {
    $unwind: {
      path: "$posts",
    }
  },{
    $group: {
      _id: "$_id",
      NoOfPost:{
        $sum:1
      }
    }
  }
]
4. Count the total number of comments.
[
  {
     $unwind: "$posts"
   },
   {
     $unwind: "$posts.comments"
   },
   {
     $group: {
       _id: "$_id",
       NoOfComment:{
         $sum:1
       }
     }
   }
 ]
5. List users and their total likes.
[
  {
    $unwind: "$posts"
  },
  {
    $group: {
      _id: "$_id",
      name:{$first:"$name"},        

      NoOfLikes: {
        $sum:"$posts.likes"
      }
    }
  }
]
6. Find the user name with the maximum likes of posts.
[
  {
    $unwind: {
      path: "$posts"
    }
  },
  {
    $group: {
      _id: "$_id",
      name: {$first : "$name"},
      "NoOfLikes":{
         $sum:"$posts.likes"
      }
    }
  },
  {
    $sort: {
      "NoOfLikes" : -1
    }
  },
  {
    $limit: 1
  }
]

7. Count the number of active and inactive users.
[
  {
    "$group": {
      "_id": "$isActive",
      "count": { "$sum": 1 }
    }
  }
]

8. List the cities with the highest average age.
[
  {
    "$group": {
      "_id": "$city",
      "averageAge": { "$avg": "$age" }
    }
  },
  {
    "$sort": { "averageAge": -1 }
  }
]

9. Count the number of users in each city.
[
  {
    $group: {
      _id: "$city",
      count: { $sum: 1 }
    }
  }
]

10. Count the number of users with JavaScript skills.
[
  {
    $match: {
      skills: "JavaScript"
    }
  },
  {
    $count: "JavaScriptSkills"
  }
]


11. Count the number of users with each skill.
[
  {
    $unwind: "$skills"
    
  },
  {
    $group: {
      _id: "$skills",
      count: {
        "$sum" : 1 
      }
    }
  }
]

12. Find users who have posts with more than 15 likes and a specific skill.
[
  {
    $unwind: "$posts"
  },
  {
    $match: {
      $and :[
        {"posts.likes" : {$gt : 15}},
        {"skills" : "React"}
      ]
    }
  }
]

13. Find users with the highest total number of likes across all posts.
[
  {
    $unwind: "$posts"
  },
  {
    $group: {
      _id: "$_id",
      name: { $first: "$name" },
      TotalLikes: {
        $sum: "$posts.likes"
      }
    
  },
  {
    $sort: {
      TotalLikes: -1
    }
  },
  {
    $limit: 1
  }
]

14. Find users who have friends and count the number of friends.
[
  {
    $match: {
      friends: {
        $exists: true,
        $not: { $size: 0 }
      }
    }
  },
  {
    $project: {
      name: 1,
      friendCount: { $size: "$friends" }
    }
  }
]


15. Find users who have at least one post with a specific comment and a specific skill.
[
  {
    $unwind: "$posts"
  },
  {
    $unwind: "$posts.comments"
  },
  {
    $match: {
      $and: [
        { "posts.comments": "specific comment" },
        { skills: "specific skill" }
      ]
    }
  }
]


16. Count users who have skills javascript and react.
[
  {
    $match: {
      skills: { $all: ["JavaScript", "React"] }
    }
  },
  {
    $count: "JavaScriptAndReactSkills"
  }
]


17. count user who have second skills as React.
[
  {
    $project: {
      secondSkill: {
        $arrayElemAt: ["$skills", 1]
      }
    }
  },
  {
    $match: {
      secondSkill: "React"
    }
  },
  {
    $count: "SecondSkillReact"
  }
]

18. Categorise users by their city and gives their id and name.
[
  {
    $group: {
      _id: "$city",
      users: {
        $push: {
          _id: "$_id",
          name: "$name"
        }
      }
    }
  }
]


19. Give user data whose city name starts with "New".
[
  {
    $match: {
      city: /^New[^a-zA-Z]/
    }
  }
]


20. Add a "postCount" field representing the total number of posts for each user.
[
  {
    $addFields: {
      postCount: { $size: "$posts" }
    }
  },
  {
    $project: {
      _id: 1,
      name: 1,
      postCount: 1
    }
  }
]

21. Add a "friendNames" field with the names of friends for each user.
[
  {
    $lookup: {
      from: "users",
      localField: "friends",
      foreignField: "_id",
      as: "friendNames"
    }
  },
  {
    $project: {
      name: 1,
      "friendNames.name": 1
    }
  }
]

22. Display posts data that have more than 1 comments.
[


  {
    $unwind: "$posts"
  },
  {
    $project: {
      posts: 1,
      commentCount: { $size: "$posts.comments" }
    }
  },
  {
    $match: {
      commentCount: { $gt: 1 }
    }
  }
]